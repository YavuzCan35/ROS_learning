https://www.youtube.com/watch?v=wfCuPQ_6VbI&list=PLLSegLrePWgJudpPUof4-nVFHGkB62Izy&index=5&ab_channel=RoboticsBack-End

after source  ~/.bashrc exit all folders to top level, cd ..

then create your own ros workspace by:

sudo mkdir ~/ros2_ws
cd ros2_ws
sudo mkdir src
sudo colcon build
source ~/ros2_ws/install/setup.bash

go to  ~/.bashrc add source ~/ros2_ws/install/setup.bash to run applications for your created workspace 

gedit ~/.bashrc

cd  ~/ros2_ws/src

ls

ros2 pkg create my_robot_controller --build-type ament_python --dependencies rclpy

or ament_cmake would be for the c++ pkg.

sudo snap install code --classic              ()downloads the vscode

still inside the src part of workspace then do following to start vscode:

code .            

then go to:

cd ~/ros2_ws 

do:

colcon build
#######
however u may get an error regarding istall ls depracated. due to setup.py not working correctly.
if this happens do following:

pip3 list              (pip3 not found returned)
sudo apt install python3-pip
pip3 list | grep setuptools        (check maybe if you need to downgrade)
to downgrade do this:
pip3 install setuptools==58.2.0
#####

cd ~/ros2_ws/src/my_robot_controller/my_robot_controller        (where __init__file for the pkg is stored)

create a python file and make it executable:
touch my_first_node.py
chmod +x my_first_node.py
cd ~/ros2_ws/src
code .

now edit the python file you created for a node and write interpreter command to first line of that python file:
you can also download ros extension in vs code extensions.
#!/usr/bin/env python3
import rclpy

from rclpy.node import Node

class MyNode(Node):
    def __init__(self): 
        super().__init__("first_node")
        self.get_logger().info("Hello from ROS2")
  
def main(args=None);
  rclpy.init(args=args) #activates ros2 communications
  node=MyNode()
  rclpy.shutdown()
  pass

if __name__=='__main__':
  main()
#####
go to teminal:
cd ~/ros2_ws/src/my_robot_controller/my_robot_controller 


to be able to run the node with ros2 run command; 
go to setup.py at ~/ros2_ws/src/my_robot_controller
code .


    entry_points={
        'console_scripts': [
            "test_node= my_robot_controller.my_first_node:main"
        ],
    },

test node = pkg name . file name : function we want to run

then:

cd ~/ros2_ws
colcon build
source ~/.bashrc


ros2 run my_robot_controller test_node


if you want to change the script you have to colcon build again. and do source bashrc.
But if you want your changed code directly updated in the environment. you use download:

colcon build --symlink-install
source ~/.bashrc

now every change will be in effect directly. if it does not work do source bash again.then try



new code add to my_first_node:
####
#!/usr/bin/env python3
import rclpy

from rclpy.node import Node

class MyNode(Node):
    def __init__(self): 
        super().__init__("first_node")
        self.counter_=0
        self.create_timer(1.0,self.timer_callback)

    def timer_callback(self):
        self.get_logger().info("Hello  O ROS2"+str(self.counter_))
        self.counter_+=1
def main(args=None):
  rclpy.init(args=args) #activates ros2 communications
  node=MyNode()
  rclpy.spin(node)
  rclpy.shutdown()
  pass

if __name__=='__main__':
  main()
####
